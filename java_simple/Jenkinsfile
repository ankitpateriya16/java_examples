  pipeline {
    agent { label 'build' }
   tools {
        maven 'mvn' 
        }
    options {
    timeout(time: 3, unit: 'MINUTES')  // Auto-abort after 15 min
    }
    environment {
        GIT_REPO = 'https://github.com/ankitpateriya16/java_examples.git'
        DOCKER_IMAGE = 'ankit9977/my-java-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'my-java-app'
        APP_PORT = '8089'
        AWS_REGION = 'us-east-1'
        ECR_REPO_NAME = 'b-safe/'
        AWS_ACCOUNT_ID = '346067777770'
     }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'üîÑ Cloning GitHub repository...'
                git url: "${env.GIT_REPO}", branch: 'master'
            }
        }
        stage('Build with Maven') {
            steps {
                echo 'üîß Building the Java application...'
                sh 'cd java_simple && mvn clean compile'
            }
        }
       stage('SonarQube Scan') {
            steps {
                script {
                    // Run SonarQube analysis after the build is successful
                     withSonarQubeEnv("SonarScanner") {
                        def scannerHome = tool name: 'SonarScanner'  // Correct way
                        sh """#!/bin/bash
                            export PATH=${scannerHome}/bin:\$PATH
                            sonar-scanner \
                                -Dsonar.projectKey=b-safe \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://34.227.48.189:9000/ \
                                -Dsonar.login=$SONAR_AUTH_TOKEN
                        """
                       }
                    }
                }
            }

        stage('Run Tests') {
            steps {
                echo 'üß™ Running tests...'
                sh 'cd java_simple && mvn test'
            }
        }

        stage('Package and Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                sh 'cd java_simple && mvn package -DskipTests'
                sh "cd java_simple && docker build -t ${DOCKER_IMAGE}:$IMAGE_TAG ."
            }
        }
        stage('Stop Old Container (if running)') {
            steps {
                sh '''
                    if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                        echo "Stopping old container..."
                        docker stop $CONTAINER_NAME
                        docker rm $CONTAINER_NAME
                    fi
                '''
            }
        }

        stage('Run Docker Container') {
            steps {
                sh "cd java_simple && docker run -d --name $CONTAINER_NAME -p ${APP_PORT}:1234 ${DOCKER_IMAGE}:$IMAGE_TAG"
            }
        }
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-id', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push Image') {
            steps {
                sh "cd java_simple && docker push ${DOCKER_IMAGE}:$IMAGE_TAG"
            }
        }

    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
        aborted {
             echo 'Build was aborted!'
             sh 'cd java_simple && killall java || true'  // Clean stuck processes
       }
    }
}
